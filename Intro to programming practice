{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0e9bdc5e",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-05-12T06:37:40.959429Z",
     "iopub.status.busy": "2024-05-12T06:37:40.958616Z",
     "iopub.status.idle": "2024-05-12T06:37:41.901337Z",
     "shell.execute_reply": "2024-05-12T06:37:41.900107Z"
    },
    "papermill": {
     "duration": 0.954588,
     "end_time": "2024-05-12T06:37:41.904183",
     "exception": false,
     "start_time": "2024-05-12T06:37:40.949595",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6658e61c",
   "metadata": {
    "papermill": {
     "duration": 0.006718,
     "end_time": "2024-05-12T06:37:41.917848",
     "exception": false,
     "start_time": "2024-05-12T06:37:41.911130",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Types"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6cfacffc",
   "metadata": {
    "papermill": {
     "duration": 0.006297,
     "end_time": "2024-05-12T06:37:41.930689",
     "exception": false,
     "start_time": "2024-05-12T06:37:41.924392",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Notes:**\n",
    "Verify the data type with type()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "47538d67",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-12T06:37:41.947203Z",
     "iopub.status.busy": "2024-05-12T06:37:41.946336Z",
     "iopub.status.idle": "2024-05-12T06:37:41.952844Z",
     "shell.execute_reply": "2024-05-12T06:37:41.951632Z"
    },
    "papermill": {
     "duration": 0.018404,
     "end_time": "2024-05-12T06:37:41.955980",
     "exception": false,
     "start_time": "2024-05-12T06:37:41.937576",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "14\n",
      "<class 'int'>\n"
     ]
    }
   ],
   "source": [
    "x = 14\n",
    "print(x)\n",
    "print(type(x))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "373b6df1",
   "metadata": {
    "papermill": {
     "duration": 0.007001,
     "end_time": "2024-05-12T06:37:41.970216",
     "exception": false,
     "start_time": "2024-05-12T06:37:41.963215",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**FLoat**\n",
    "Whenever you write an number with a decimal point, Python recognizes it as a float data type."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "486876c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-12T06:37:41.986170Z",
     "iopub.status.busy": "2024-05-12T06:37:41.985788Z",
     "iopub.status.idle": "2024-05-12T06:37:41.991047Z",
     "shell.execute_reply": "2024-05-12T06:37:41.990025Z"
    },
    "papermill": {
     "duration": 0.016738,
     "end_time": "2024-05-12T06:37:41.994330",
     "exception": false,
     "start_time": "2024-05-12T06:37:41.977592",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5.0\n",
      "<class 'float'>\n"
     ]
    }
   ],
   "source": [
    "y = 5.\n",
    "print(y)\n",
    "print(type(y))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68e612f9",
   "metadata": {
    "papermill": {
     "duration": 0.006631,
     "end_time": "2024-05-12T06:37:42.007949",
     "exception": false,
     "start_time": "2024-05-12T06:37:42.001318",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Strings**\n",
    "\n",
    "* Note that the quotation marks are not included when calculating the length. len() is used for strings.\n",
    "* If you multiply a string by a boolean with value True, it just returns that same string. And if you multiply a string by a boolean with value False, it returns an empty string (or a string with length zero)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "48173757",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-12T06:37:42.024343Z",
     "iopub.status.busy": "2024-05-12T06:37:42.023176Z",
     "iopub.status.idle": "2024-05-12T06:37:42.029543Z",
     "shell.execute_reply": "2024-05-12T06:37:42.028340Z"
    },
    "papermill": {
     "duration": 0.017182,
     "end_time": "2024-05-12T06:37:42.031954",
     "exception": false,
     "start_time": "2024-05-12T06:37:42.014772",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "25\n"
     ]
    }
   ],
   "source": [
    "z = \"Ubayed here. How are you?\"\n",
    "print(len(z))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "621a82ac",
   "metadata": {
    "papermill": {
     "duration": 0.006595,
     "end_time": "2024-05-12T06:37:42.045519",
     "exception": false,
     "start_time": "2024-05-12T06:37:42.038924",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Boolean**\n",
    "\n",
    "When you add booleans, adding False is equivalent to adding 0, and adding True is equivalent to adding 1."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3625d1a9",
   "metadata": {
    "papermill": {
     "duration": 0.006559,
     "end_time": "2024-05-12T06:37:42.058877",
     "exception": false,
     "start_time": "2024-05-12T06:37:42.052318",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Lists"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d6b4f64",
   "metadata": {
    "papermill": {
     "duration": 0.00649,
     "end_time": "2024-05-12T06:37:42.072345",
     "exception": false,
     "start_time": "2024-05-12T06:37:42.065855",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "list will make it easier to:\n",
    "\n",
    "1. get an item at a specified position (first, second, third, etc),\n",
    "1. check the number of items, and\n",
    "1. add and remove items."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "93d66413",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-12T06:37:42.087989Z",
     "iopub.status.busy": "2024-05-12T06:37:42.087340Z",
     "iopub.status.idle": "2024-05-12T06:37:42.092478Z",
     "shell.execute_reply": "2024-05-12T06:37:42.091737Z"
    },
    "papermill": {
     "duration": 0.015476,
     "end_time": "2024-05-12T06:37:42.094577",
     "exception": false,
     "start_time": "2024-05-12T06:37:42.079101",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "flowers_list = [\"pink primrose\", \"hard-leaved pocket orchid\", \"canterbury bells\", \"sweet pea\", \"english marigold\", \"tiger lily\", \"moon orchid\", \"bird of paradise\", \"monkshood\", \"globe thistle\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e055e618",
   "metadata": {
    "papermill": {
     "duration": 0.00647,
     "end_time": "2024-05-12T06:37:42.108815",
     "exception": false,
     "start_time": "2024-05-12T06:37:42.102345",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Indexing**\n",
    "\n",
    "We can refer to any item in the list according to its position in the list (first, second, third, etc). This is called **indexing.**\n",
    "\n",
    "Note that Python uses zero-based indexing, which means that:\n",
    "\n",
    "1. to pull the first entry in the list, you use 0,\n",
    "1. to pull the second entry in the list, you use 1, and\n",
    "1. to pull the final entry in the list, you use one less than the length of the list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d9a05751",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-12T06:37:42.123897Z",
     "iopub.status.busy": "2024-05-12T06:37:42.123513Z",
     "iopub.status.idle": "2024-05-12T06:37:42.129941Z",
     "shell.execute_reply": "2024-05-12T06:37:42.128743Z"
    },
    "papermill": {
     "duration": 0.016603,
     "end_time": "2024-05-12T06:37:42.132190",
     "exception": false,
     "start_time": "2024-05-12T06:37:42.115587",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "First entry: pink primrose\n",
      "Second entry: hard-leaved pocket orchid\n",
      "Last entry: globe thistle\n"
     ]
    }
   ],
   "source": [
    "print(\"First entry:\", flowers_list[0])\n",
    "print(\"Second entry:\", flowers_list[1])\n",
    "\n",
    "# The list has length ten, so we refer to final entry with 9\n",
    "print(\"Last entry:\", flowers_list[9])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "579c1995",
   "metadata": {
    "papermill": {
     "duration": 0.006736,
     "end_time": "2024-05-12T06:37:42.145956",
     "exception": false,
     "start_time": "2024-05-12T06:37:42.139220",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Slicing**\n",
    "\n",
    "You can also pull a segment of a list (for instance, the first three entries or the last two entries). This is called slicing. For instance:\n",
    "\n",
    "1. to pull the first x entries, you use [:x], and\n",
    "1. to pull the last y entries, you use [-y:]."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "cc196eea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-12T06:37:42.163136Z",
     "iopub.status.busy": "2024-05-12T06:37:42.162729Z",
     "iopub.status.idle": "2024-05-12T06:37:42.168815Z",
     "shell.execute_reply": "2024-05-12T06:37:42.167677Z"
    },
    "papermill": {
     "duration": 0.017774,
     "end_time": "2024-05-12T06:37:42.171311",
     "exception": false,
     "start_time": "2024-05-12T06:37:42.153537",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "First three entries: ['pink primrose', 'hard-leaved pocket orchid', 'canterbury bells']\n",
      "Final two entries: ['monkshood', 'globe thistle']\n"
     ]
    }
   ],
   "source": [
    "print(\"First three entries:\", flowers_list[:3])\n",
    "print(\"Final two entries:\", flowers_list[-2:])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "64931fb7",
   "metadata": {
    "papermill": {
     "duration": 0.007061,
     "end_time": "2024-05-12T06:37:42.185506",
     "exception": false,
     "start_time": "2024-05-12T06:37:42.178445",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Removing items**\n",
    "\n",
    "Remove an item from a list with .remove(), and put the item you would like to remove in parentheses."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "9e4d8cff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-12T06:37:42.201807Z",
     "iopub.status.busy": "2024-05-12T06:37:42.201391Z",
     "iopub.status.idle": "2024-05-12T06:37:42.207025Z",
     "shell.execute_reply": "2024-05-12T06:37:42.205923Z"
    },
    "papermill": {
     "duration": 0.016563,
     "end_time": "2024-05-12T06:37:42.209213",
     "exception": false,
     "start_time": "2024-05-12T06:37:42.192650",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['pink primrose', 'canterbury bells', 'sweet pea', 'english marigold', 'tiger lily', 'moon orchid', 'bird of paradise', 'monkshood', 'globe thistle']\n"
     ]
    }
   ],
   "source": [
    "flowers_list.remove(\"hard-leaved pocket orchid\")\n",
    "print(flowers_list)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9acc9a53",
   "metadata": {
    "papermill": {
     "duration": 0.006921,
     "end_time": "2024-05-12T06:37:42.223524",
     "exception": false,
     "start_time": "2024-05-12T06:37:42.216603",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Adding items**\n",
    "\n",
    "Add an item to a list with .append(), and put the item you would like to add in parentheses."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "33be555d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-12T06:37:42.239849Z",
     "iopub.status.busy": "2024-05-12T06:37:42.239382Z",
     "iopub.status.idle": "2024-05-12T06:37:42.244999Z",
     "shell.execute_reply": "2024-05-12T06:37:42.244160Z"
    },
    "papermill": {
     "duration": 0.016725,
     "end_time": "2024-05-12T06:37:42.247543",
     "exception": false,
     "start_time": "2024-05-12T06:37:42.230818",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['pink primrose', 'canterbury bells', 'sweet pea', 'english marigold', 'tiger lily', 'moon orchid', 'bird of paradise', 'monkshood', 'globe thistle', 'water lily']\n"
     ]
    }
   ],
   "source": [
    "flowers_list.append(\"water lily\")\n",
    "print(flowers_list)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a78c5e72",
   "metadata": {
    "papermill": {
     "duration": 0.007377,
     "end_time": "2024-05-12T06:37:42.262601",
     "exception": false,
     "start_time": "2024-05-12T06:37:42.255224",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Other methods**\n",
    "\n",
    "You can actually use Python to quickly turn a string into a list with .split(). In the parentheses, we need to provide the character should be used to mark the end of one list item and the beginning of another, and enclose it in quotation marks. In this case, that character is a comma."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c033a10d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-12T06:37:42.280220Z",
     "iopub.status.busy": "2024-05-12T06:37:42.279813Z",
     "iopub.status.idle": "2024-05-12T06:37:42.285847Z",
     "shell.execute_reply": "2024-05-12T06:37:42.284655Z"
    },
    "papermill": {
     "duration": 0.017332,
     "end_time": "2024-05-12T06:37:42.288352",
     "exception": false,
     "start_time": "2024-05-12T06:37:42.271020",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['pink primrose', 'hard-leaved pocket orchid', 'canterbury bells', 'sweet pea', 'english marigold', 'tiger lily', 'moon orchid', 'bird of paradise', 'monkshood', 'globe thistle']\n"
     ]
    }
   ],
   "source": [
    "flowers = \"pink primrose,hard-leaved pocket orchid,canterbury bells,sweet pea,english marigold,tiger lily,moon orchid,bird of paradise,monkshood,globe thistle\"\n",
    "print(flowers.split(\",\"))"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 30698,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4.841247,
   "end_time": "2024-05-12T06:37:42.715967",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-05-12T06:37:37.874720",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
